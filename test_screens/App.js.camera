'use strict';
import React, { Component } from 'react';
import { AppRegistry, Dimensions, Image, ImageBackground, StyleSheet, Text, TouchableOpacity, Vibration, View } from 'react-native';
import { RNCamera } from 'react-native-camera';
import { dirPictures } from './dirStorage';


const RNFS = require('react-native-fs');
const moment = require('moment');


//move the attachment to app folder
const moveAttachment = async (filePath, newFilepath) => {
  return new Promise((resolve, reject) => {
    RNFS.mkdir(dirPictures)
      .then(() => {
        RNFS.moveFile(filePath, newFilepath)
          .then(() => {
            console.log('FILE MOVED', filePath, newFilepath);
            resolve(true);
          })
          .catch(error => {
            console.log('moveFile error', error);
            reject(error);
          });
      }) 
      .catch(err => {
        console.log('mkdir error', err);
        reject(err);
      });
  });
};

class App extends Component {
  state = {}
  render() {
    const { imageUri } = this.state;
    if (imageUri) {
      console.log(imageUri);
      Vibration.vibrate();
      return (
        <Image source={{uri: imageUri}} style={{width: Dimensions.get('window').width, height: Dimensions.get('window').height}}/>
      )
    }
    return (
      <View style={styles.container}>
        <RNCamera
          ref={ref => {
            this.camera = ref;
          }}
          style={styles.preview}
          type={RNCamera.Constants.Type.back}
          androidCameraPermissionOptions={{
            title: 'Permission to use camera',
            message: 'We need your permission to use your camera',
            buttonPositive: 'Ok',
            buttonNegative: 'Cancel',
          }}
          androidRecordAudioPermissionOptions={{
            title: 'Permission to use audio recording',
            message: 'We need your permission to use your audio',
            buttonPositive: 'Ok',
            buttonNegative: 'Cancel',
          }}
          onBarCodeRead={this.takePicture.bind(this)
          }
        />
      </View>
    );
  }

  saveImage = async filePath => {
    try {
      // set new image name and filepath
      const newImageName = `${moment().format('DDMMYY_HHmmSSS')}.jpg`;
      const newFilepath = `${dirPictures}/${newImageName}`;
      // move and save image to new filepath
      const imageMoved = await moveAttachment(filePath, newFilepath);
      console.log('image moved', imageMoved);
      this.setState({ imageUri: 'file://' + newFilepath });
    } catch (error) {
      console.log(error);
    }
  };
  
  takePicture = async () => {
    if (this.camera) {
      //Vibration.vibrate();
      const options = { quality: 0.5, base64: true };
      const data = await this.camera.takePictureAsync(options);
      this.saveImage(data.uri)
      console.log(data.uri);
    }
  };
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    flexDirection: 'column',
    backgroundColor: 'black',
  },
  preview: {
    flex: 1,
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
  capture: {
    flex: 0,
    backgroundColor: '#fff',
    borderRadius: 5,
    padding: 15,
    paddingHorizontal: 20,
    alignSelf: 'center',
    margin: 20,
  },
});

export default App;